"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commitChangesHelper = void 0;

var R = _interopRequireWildcard(require("ramda"));

var _sanctuary = require("sanctuary");

var _commitModsHelper = require("./commitModsHelper");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var checkPrimaryKey = function checkPrimaryKey(_ref) {
  var row = _ref.row,
      pks = _ref.pks;
  return R.allPass(R.map(R.eqProps, pks))(row);
};

var alterMatch = R.curry(function (fn, state, row, pks) {
  return R.map(R.ifElse(checkPrimaryKey({
    row: row,
    pks: pks
  }), fn, R.identity), state);
});

var nonPrimaryKeyValuesAltered = function nonPrimaryKeyValuesAltered(modalData, pks, errMsg) {
  return R.equals(R.omit(pks, modalData.row), R.omit(pks, modalData.orig)) ? (0, _sanctuary.Left)(errMsg) : (0, _sanctuary.Right)(modalData);
};

var mapRanges = function mapRanges(list) {
  return list.map(function (row) {
    return (0, _commitModsHelper.moment)().range((0, _commitModsHelper.moment)(row.validoDal).format("YYYY-MM-DD"), (0, _commitModsHelper.moment)(row.validoAl).format("YYYY-MM-DD"));
  });
};

var periodiRangeOverlapChecker = function periodiRangeOverlapChecker(_ref2) {
  var tableData = _ref2.tableData,
      modalData = _ref2.modalData,
      selectedPeriodo = _ref2.selectedPeriodo,
      periodo = _ref2.periodo,
      periodoKeys = _ref2.periodoKeys,
      periodoErrorMsg = _ref2.periodoErrorMsg;
  var getSelectedRange = periodo.filter(function (row) {
    return row.periodo === selectedPeriodo;
  }).map(function (x) {
    return (0, _commitModsHelper.moment)().range(x.validoDal, x.validoAl);
  });
  var matchingDataPeriodo = tableData.filter(checkPrimaryKey({
    row: modalData.row,
    pks: periodoKeys
  })).map(function (x) {
    return x.periodo;
  }).map(function (val) {
    return periodo.filter(function (row) {
      return row.periodo === val;
    });
  });
  var getMapRanges = R.isEmpty(matchingDataPeriodo) ? [] : mapRanges(R.head(matchingDataPeriodo));
  var resultList = getMapRanges.map(function (range) {
    return getSelectedRange[0].overlaps(range);
  });
  return R.any(R.equals(true), resultList) ? (0, _sanctuary.Left)([periodoErrorMsg]) : (0, _sanctuary.Right)(modalData);
};

var excludesPrimaryKey = R.curry(function (tableData, modalData, pks, errMsg, periodo, periodoKeys, periodoErrorMsg) {
  return tableData.filter(checkPrimaryKey({
    row: modalData.row,
    pks: pks
  })).length > 0 ? (0, _sanctuary.Left)([errMsg]) : periodiRangeOverlapChecker({
    tableData: tableData,
    modalData: modalData,
    selectedPeriodo: modalData.row.periodo,
    periodo: periodo,
    periodoKeys: periodoKeys,
    periodoErrorMsg: periodoErrorMsg
  });
});

var primaryKeyValuesMatch = function primaryKeyValuesMatch(modalData, pks, errMsg) {
  return R.all(function (x) {
    return R.equals(modalData.row[x], modalData.orig[x]);
  }, pks) ? (0, _sanctuary.Right)(modalData) : (0, _sanctuary.Left)([errMsg]);
};

var onlyNonPrimaryAltered = function onlyNonPrimaryAltered(modalData, pks, errMsg) {
  return R.pipe(function (x) {
    return primaryKeyValuesMatch(x, pks, errMsg);
  }, R.chain(function (x) {
    return nonPrimaryKeyValuesAltered(x, pks, errMsg);
  }))(modalData);
};

var addOrUpdate = function addOrUpdate(tableData, pks, errMsg, periodo, periodoKeys, periodoErrorMsg) {
  return function (modalData) {
    return (0, _commitModsHelper.sanctuaryConcat)(excludesPrimaryKey(tableData, modalData, pks, errMsg, periodo, periodoKeys, periodoErrorMsg), onlyNonPrimaryAltered(modalData, pks, errMsg));
  };
};

var isUpdate = R.ifElse(R.propEq("type", "Update Mapping"), _sanctuary.Right, R.always((0, _sanctuary.Left)([])));
var getUpdater = (0, _commitModsHelper.reader)(function (_ref3) {
  var pks = _ref3.pks,
      errMsg = _ref3.errMsg,
      modalData = _ref3.modalData,
      tableData = _ref3.tableData,
      periodo = _ref3.periodo,
      periodoKeys = _ref3.periodoKeys,
      periodoErrorMsg = _ref3.periodoErrorMsg;
  return R.pipe(isUpdate, R.chain(addOrUpdate(tableData, pks, errMsg, periodo, periodoKeys, periodoErrorMsg)), R.map(function (m) {
    return R.assoc("mod", m.type, m.row);
  }), R.map(R.assoc("original", modalData.orig.original || modalData.orig)), R.map(function (updated) {
    return alterMatch(R.always(updated), tableData, modalData.orig, pks);
  }))(modalData);
});
var isAdd = R.ifElse(R.propEq("type", "Add Mapping"), _sanctuary.Right, R.always((0, _sanctuary.Left)([])));
var getAdder = (0, _commitModsHelper.reader)(function (_ref4) {
  var pks = _ref4.pks,
      errMsg = _ref4.errMsg,
      modalData = _ref4.modalData,
      tableData = _ref4.tableData,
      periodo = _ref4.periodo,
      periodoKeys = _ref4.periodoKeys,
      periodoErrorMsg = _ref4.periodoErrorMsg;
  return R.pipe(isAdd, R.chain(function (x) {
    return excludesPrimaryKey(tableData, x, pks, errMsg, periodo, periodoKeys, periodoErrorMsg);
  }), R.map(function (m) {
    return R.assoc("mod", m.type, m.row);
  }), R.map(function (x) {
    return R.prepend(x, tableData);
  }))(modalData);
});
var getModifiers = R.traverse(_commitModsHelper.reader.of, R.identity, [getUpdater, getAdder]).map(R.apply(_sanctuary.concat));

var commitChangesHelper = function commitChangesHelper(_ref5) {
  var pks = _ref5.pks,
      errMsg = _ref5.errMsg,
      modalData = _ref5.modalData,
      tableData = _ref5.tableData;
  return getModifiers.run({
    pks: pks,
    errMsg: errMsg,
    modalData: modalData,
    tableData: tableData
  });
};

exports.commitChangesHelper = commitChangesHelper;
var _default = commitChangesHelper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,