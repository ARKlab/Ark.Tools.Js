"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var R = _interopRequireWildcard(require("ramda"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var keyType = function keyType(_ref) {
  var key = _ref.key,
      data = _ref.data;
  return R.pipe(R.prop(key), R.type)(data);
};

var columnFilterDataBuilder = function columnFilterDataBuilder(_ref2) {
  var data = _ref2.data,
      _ref2$columnFilterNam = _ref2.columnFilterName,
      columnFilterName = _ref2$columnFilterNam === void 0 ? "ColumnFilter_" : _ref2$columnFilterNam;
  return R.pipe(R.head, R.keys, R.map(function (key) {
    return "".concat(columnFilterName).concat(key, "=").concat(R.path([key, "value"], data[0]));
  }), R.join("&"))(data);
};

var objDataBuilder = function objDataBuilder(_ref3) {
  var data = _ref3.data;
  return R.pipe(R.keys, R.map(function (key) {
    return "".concat(key, "=").concat(encodeURIComponent(R.prop(key, data)));
  }), R.join("&"))(data);
};

var simpleDataBuilder = function simpleDataBuilder(_ref4) {
  var key = _ref4.key,
      data = _ref4.data;

  switch (R.type(data[0])) {
    case "Object":
      return R.pipe(R.map(function (_ref5) {
        var value = _ref5.value;
        return "".concat(key, "=").concat(encodeURIComponent(value));
      }), R.values, R.join("&"))(data);

    case "Number":
    case "String":
      return R.pipe(R.map(function (value) {
        return "".concat(key, "=").concat(encodeURIComponent(value));
      }), R.join("&"))(data);

    default:
      return "";
  }

  return R.pipe(R.map(function (_ref6) {
    var value = _ref6.value;
    return "".concat(key, "=").concat(encodeURIComponent(value));
  }), R.values, R.join("&"))(data);
};

var arrDataBuilder = function arrDataBuilder(_ref7) {
  var key = _ref7.key,
      data = _ref7.data,
      columnFilterName = _ref7.columnFilterName;
  return R.equals(key, "columnFilters") ? columnFilterDataBuilder({
    columnFilterName: columnFilterName,
    data: data
  }) : simpleDataBuilder({
    key: key,
    data: data
  });
};

var builder = function builder(_ref8) {
  var key = _ref8.key,
      data = _ref8.data,
      columnFilterName = _ref8.columnFilterName;

  switch (keyType({
    key: key,
    data: data
  })) {
    case "Array":
      return arrDataBuilder({
        key: key,
        columnFilterName: columnFilterName,
        data: R.prop(key, data)
      });

    case "Object":
      return objDataBuilder({
        data: R.prop(key, data)
      });

    case "Number":
    case "String":
      return "".concat(key, "=").concat(encodeURIComponent(R.prop(key, data)));

    default:
      return "";
  }
};

var queryStringBuilder = function queryStringBuilder(_ref9) {
  var filters = _ref9.filters,
      columnFilterName = _ref9.columnFilterName;
  return R.pipe(R.filter(function (x) {
    return x;
  }), R.keys, R.map(function (key) {
    return builder({
      key: key,
      data: filters,
      columnFilterName: columnFilterName
    });
  }), R.join("&"))(filters);
};

var _default = queryStringBuilder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,